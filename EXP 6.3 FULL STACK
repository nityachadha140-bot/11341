const express = require("express");
const mongoose = require("mongoose");
const bodyParser = require("body-parser");

const app = express();
app.use(bodyParser.json());

// ============================
// MongoDB Connection
// ============================
mongoose
  .connect("mongodb://localhost:27017/bankDB", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => console.log("✅ Connected to MongoDB"))
  .catch((err) => console.error("❌ MongoDB connection failed:", err));

// ============================
// Schema and Model
// ============================
const userSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  balance: { type: Number, required: true, min: 0 },
});

const User = mongoose.model("User", userSchema);

// ============================
// Seed Sample Data (optional)
// Run only once
// ============================
// Uncomment to initialize sample users:
// async function seedUsers() {
//   await User.deleteMany({});
//   await User.insertMany([
//     { username: "Alice", balance: 1000 },
//     { username: "Bob", balance: 500 },
//   ]);
//   console.log("✅ Sample users added.");
// }
// seedUsers();

// ============================
// Transfer Route
// ============================
app.post("/transfer", async (req, res) => {
  const { from, to, amount } = req.body;

  // Validate input
  if (!from || !to || !amount || amount <= 0) {
    return res.status(400).json({ message: "Invalid transfer data" });
  }

  try {
    // Step 1: Find both accounts
    const sender = await User.findOne({ username: from });
    const receiver = await User.findOne({ username: to });

    if (!sender || !receiver) {
      return res.status(404).json({ message: "Sender or receiver not found" });
    }

    // Step 2: Check balance
    if (sender.balance < amount) {
      return res.status(400).json({ message: "Insufficient balance" });
    }

    // Step 3: Deduct and update balances sequentially
    sender.balance -= amount;
    await sender.save(); // Update sender first

    receiver.balance += amount;
    await receiver.save(); // Then update receiver

    return res.status(200).json({
      message: `Transferred $${amount} from ${from} to ${to}`,
      senderNewBalance: sender.balance,
      receiverNewBalance: receiver.balance,
    });
  } catch (error) {
    console.error("Transfer error:", error);
    return res.status(500).json({ message: "Server error during transfer" });
  }
});

// ============================
// Check balance of user
// ============================
app.get("/balance/:username", async (req, res) => {
  try {
    const user = await User.findOne({ username: req.params.username });
    if (!user) return res.status(404).json({ message: "User not found" });
    res.status(200).json({ username: user.username, balance: user.balance });
  } catch (error) {
    res.status(500).json({ message: "Server error" });
  }
});

// ============================
// Start Server
// ============================
const PORT = 3000;
app.listen(PORT, () => console.log(`🚀 Server running at http://localhost:${PORT}`));
