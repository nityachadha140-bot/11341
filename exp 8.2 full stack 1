Step 1: Setup Your Project

In your terminal:

mkdir jwt-auth-demo
cd jwt-auth-demo
npm init -y
npm install express jsonwebtoken body-parser

Step 2: Create server.js
const express = require("express");
const jwt = require("jsonwebtoken");
const bodyParser = require("body-parser");

const app = express();
app.use(bodyParser.json());

const SECRET_KEY = "mysecretkey"; // In real apps, use environment variables

// --- Step 1: Dummy user for login ---
const user = {
  username: "admin",
  password: "12345",
};

// --- Step 2: Login Route ---
app.post("/login", (req, res) => {
  const { username, password } = req.body;

  // Validate credentials
  if (username === user.username && password === user.password) {
    // Create a JWT token
    const token = jwt.sign({ username }, SECRET_KEY, { expiresIn: "1h" });
    return res.json({ message: "Login successful", token });
  }

  return res.status(401).json({ message: "Invalid credentials" });
});

// --- Step 3: Middleware to verify token ---
function verifyToken(req, res, next) {
  const authHeader = req.headers["authorization"];
  const token = authHeader && authHeader.split(" ")[1]; // Extract Bearer token

  if (!token) return res.status(403).json({ message: "Token required" });

  jwt.verify(token, SECRET_KEY, (err, user) => {
    if (err) return res.status(403).json({ message: "Invalid or expired token" });
    req.user = user;
    next();
  });
}

// --- Step 4: Protected Route ---
app.get("/dashboard", verifyToken, (req, res) => {
  res.json({
    message: `Welcome, ${req.user.username}!`,
    data: "This is your protected dashboard.",
  });
});

// --- Step 5: Public Route ---
app.get("/", (req, res) => {
  res.send("Public route: No token required.");
});

// --- Step 6: Start Server ---
const PORT = 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

Step 3: Test the API

You can use Postman, Insomnia, or Thunder Client (VS Code extension) to test your routes.

1Ô∏è‚É£ Login Request

POST ‚Üí http://localhost:5000/login

Body (JSON):

{
  "username": "admin",
  "password": "12345"
}


Response:

{
  "message": "Login successful",
  "token": "<your-generated-jwt>"
}

2Ô∏è‚É£ Access Protected Route

GET ‚Üí http://localhost:5000/dashboard

Add Authorization Header:

Authorization: Bearer <your-generated-jwt>


Response:

{
  "message": "Welcome, admin!",
  "data": "This is your protected dashboard."
}

3Ô∏è‚É£ Try Without Token

If you skip the Authorization header or send an invalid token:

Response:

{
  "message": "Token required"
}


or

{
  "message": "Invalid or expired token"
}


üí¨ Expected Output

When tested correctly:

Server running on port 5000

# Login
POST /login  ->  Returns JWT token

# Access Protected Route
GET /dashboard ->  Returns personalized data (with valid token)

# Unauthorized
GET /dashboard (no token) ->  403 Forbidden
