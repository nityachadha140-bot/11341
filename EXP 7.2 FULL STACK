<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>My Shop â€” Redux Toolkit Demo</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    :root { font-family: Georgia, 'Times New Roman', serif; }
    body { margin: 0; padding: 24px; background:#fff; }
    .frame { border: 3px solid #222; padding: 24px; max-width: 980px; margin: 0 auto; }
    h1 { text-align: center; font-size: 56px; margin: 6px 0 16px; }
    h2 { text-align: center; font-size: 40px; margin: 10px 0 24px; }
    .products { display: flex; gap: 36px; justify-content: center; flex-wrap: wrap; margin-bottom: 36px; }
    .card { width: 260px; padding: 24px; border: 1px solid #ddd; border-radius: 14px; text-align: center; box-shadow: 0 0 0 1px #eee inset; }
    .card h3 { font-size: 28px; margin: 6px 0 10px; }
    .price { font-size: 22px; margin: 6px 0 16px; }
    button { font-size: 18px; padding: 8px 14px; border-radius: 8px; border: 1px solid #bbb; background: #f3f3f3; cursor: pointer; }
    button:hover { background: #e9e9e9; }
    .cart { max-width: 720px; margin: 0 auto; }
    .cart-row { display:flex; align-items:center; gap:12px; font-size:22px; margin: 12px 0; }
    .qty { width: 80px; padding: 6px 8px; font-size: 18px; }
    .muted { color: #666; }
    .totals { margin-top: 16px; font-size: 22px; text-align: right; }
    .divider { height: 1px; background: #e5e5e5; margin: 16px 0; }
    .empty { text-align:center; font-size: 18px; color:#777; margin-top: 12px; }
  </style>
</head>
<body>
  <div id="root"></div>

  <!-- React + Redux Toolkit + React-Redux (UMD) -->
  <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
  <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
  <script crossorigin src="https://unpkg.com/@reduxjs/toolkit@2.2.3/dist/redux-toolkit.umd.js"></script>
  <script crossorigin src="https://unpkg.com/react-redux@9.1.2/dist/react-redux.umd.js"></script>

  <script>
    const { useState } = React;
    const { createRoot } = ReactDOM;
    const { Provider, useDispatch, useSelector } = ReactRedux;
    const { configureStore, createSlice } = RTK;

    // -------------------- Redux Slice --------------------
    const cartSlice = createSlice({
      name: 'cart',
      initialState: { items: [] }, // {name, price, quantity}
      reducers: {
        addToCart: (state, action) => {
          const item = action.payload; // {name, price}
          const found = state.items.find(i => i.name === item.name);
          if (found) {
            found.quantity += 1;
          } else {
            state.items.push({ ...item, quantity: 1 });
          }
        },
        removeFromCart: (state, action) => {
          const name = action.payload;
          state.items = state.items.filter(i => i.name !== name);
        },
        updateQuantity: (state, action) => {
          const { name, quantity } = action.payload;
          const found = state.items.find(i => i.name === name);
          if (found) {
            const q = Math.max(1, Number(quantity) || 1);
            found.quantity = q;
          }
        },
        clearCart: (state) => { state.items = []; }
      }
    });

    const { addToCart, removeFromCart, updateQuantity, clearCart } = cartSlice.actions;

    const store = configureStore({
      reducer: { cart: cartSlice.reducer }
    });

    // -------------------- UI Components --------------------
    const PRODUCTS = [
      { name: 'Laptop', price: 1200 },
      { name: 'Mouse', price: 25 },
      { name: 'Keyboard', price: 45 },
    ];

    const Currency = ({ value }) => <span>${value}</span>;

    function Products() {
      const dispatch = useDispatch();
      return (
        <section>
          <h2>Products</h2>
          <div className="products">
            {PRODUCTS.map(p => (
              <div className="card" key={p.name}>
                <h3>{p.name}</h3>
                <div className="price"><Currency value={p.price} /></div>
                <button onClick={() => dispatch(addToCart(p))}>Add to Cart</button>
              </div>
            ))}
          </div>
        </section>
      );
    }

    function Cart() {
      const items = useSelector(state => state.cart.items);
      const dispatch = useDispatch();
      const total = items.reduce((sum, i) => sum + i.price * i.quantity, 0);

      return (
        <section className="cart">
          <h2>Shopping Cart</h2>
          {items.length === 0 && <div className="empty">Your cart is empty. Add some products above.</div>}
          {items.map(item => (
            <div className="cart-row" key={item.name}>
              <div>{item.name} (<span className="muted">${item.price}</span>)</div>
              <input
                className="qty"
                type="number"
                min="1"
                value={item.quantity}
                onChange={(e) => dispatch(updateQuantity({ name: item.name, quantity: e.target.value }))}
              />
              <button onClick={() => dispatch(removeFromCart(item.name))}>Remove</button>
            </div>
          ))}
          {items.length > 0 && (
            <>
              <div className="divider"></div>
              <div className="totals">
                <strong>Total: <Currency value={total} /></strong>
                <div style="margin-top:8px;">
                  <button onClick={() => dispatch(clearCart())}>Clear Cart</button>
                </div>
              </div>
            </>
          )}
        </section>
      );
    }

    function App() {
      return (
        <div className="frame">
          <h1>My Shop</h1>
          <Products />
          <Cart />
        </div>
      );
    }

    // -------------------- Render --------------------
    const root = createRoot(document.getElementById('root'));
    root.render(
      <Provider store={store}>
        <App />
      </Provider>
    );
  </script>
</body>
</html>






